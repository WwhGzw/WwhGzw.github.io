<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Redis</title>
    <link href="/2022/01/28/Redis/"/>
    <url>/2022/01/28/Redis/</url>
    
    <content type="html"><![CDATA[<h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h1><h2 id="Redis中的数据结构"><a href="#Redis中的数据结构" class="headerlink" title="Redis中的数据结构"></a>Redis中的数据结构</h2><p><img src="/2022/01/28/Redis/image-20211121153717795.png" alt="image-20211121153717795"></p><p>时间复杂度</p><p><img src="/2022/01/28/Redis/image-20211121160046838.png" alt="image-20211121160046838"></p><p>哈希表通过用key键计算出对应的hashcode存放到对应的哈希蛹中 </p><p>所以使用哈希表的增删改查都是O(1)级别的</p><p>redis广泛的使用了哈希表包括 String、Hash 和 Set</p><p>Sorted Set 采用了 O(logN) 复杂度的跳表</p><p>跳表  本身就是一种链表，加入了多级索引  提高检索效率</p><p><img src="/2022/01/28/Redis/image-20211121212325545.png" alt="image-20211121212325545"></p><p>最终的时间复杂度为O(logN)</p><p>  如果数据较多，空间少时，会出现哈希冲突</p><p>避免哈希冲突可使用value储存相应集合的指针</p><p>问：整数数组和压缩列表在查找时间复杂度方面并没有很大的优势，那为什么 Redis 还会把它们作为底层数据结构呢？</p><p>Redis 是单线程，主要是指 <strong>Redis 的网络 IO 和键值对读写是由一个线程来完成的，这也是 Redis 对外提供键值存储服务的主要流程</strong>。但 Redis 的其他功能，比如持久化、异步删除、集群数据同步等，其实是由额外的线程执行的。</p><p>Redis 有 List 的数据类型，并提供出队（LPOP）和入队（LPUSH）操作。假设 Redis 采用多线程设计，如下图所示，现在有两个线程 A 和 B，线程 A 对一个 List 做 LPUSH 操作，并对队列长度加 1。同时，线程 B 对该 List 执行 LPOP 操作，并对队列长度减 1。为了保证队列长度的正确性，Redis 需要让线程 A 和 B 的 LPUSH 和 LPOP 串行执行，这样一来，Redis 可以无误地记录它们对 List 长度的修改。否则，我们可能就会得到错误的长度结果。这就是<strong>多线程编程模式面临的共享资源的并发访问控制问题</strong>。</p><p>Redis为什么使用单线程</p><p>采用多线程开发一般会引入同步原语来保护共享资源的并发访问，这也会降低系统代码的易调试性和可维护性。为了避免这些问题，Redis 直接采用了单线程模式。</p><p>单线程的Redis为什么那么快</p><p>一方面，Redis 的大部分操作在内存上完成，再加上它采用了高效的数据结构，例如哈希表和跳表，这是它实现高性能的一个重要原因。另一方面，就是 Redis 采用了<strong>多路复用机制</strong>，使其在网络 IO 操作中能并发处理大量的客户端请求，实现高吞吐率。接下来，我们就重点学习下多路复用机制。</p><h2 id="AOF日志"><a href="#AOF日志" class="headerlink" title="AOF日志"></a>AOF日志</h2><p>日志的作用：服务器宕机后恢复数据</p><p>AOF日志是先进行对Redis的操作 再写日志  比起先写日志后执行命令来看 不会出现错误的数据，保证数据准确性</p><p>坏处：</p><p>一丶可能发生阻塞，在写日志是对磁盘读写过慢，阻塞下一次命令的执行，</p><p>二丶在Redis执行完命令后 服务器宕机，日志无法书写，造成数据丢失</p><h3 id="三种写回策略"><a href="#三种写回策略" class="headerlink" title="三种写回策略"></a>三种写回策略</h3><p><strong>Always</strong>，同步写回：每个写命令执行完，立马同步地将日志写回磁盘；</p><p><strong>Everysec</strong>，每秒写回：每个写命令执行完，只是先把日志写到 AOF 文件的内存缓冲区，每隔一秒把缓冲区中的内容写入磁盘；</p><p><strong>No</strong>，操作系统控制的写回：每个写命令执行完，只是先把日志写到 AOF 文件的内存缓冲区，由操作系统决定何时将缓冲区内容写回磁盘。</p><h3 id="策略的弊端"><a href="#策略的弊端" class="headerlink" title="策略的弊端"></a>策略的弊端</h3><p><strong>Always</strong>，“同步写回”可以做到基本不丢数据，但是它在每一个写命令后都有一个慢速的落盘操作，不可避免地会影响主线程性能；</p><p><strong>Everysec</strong>，虽然“操作系统控制的写回”在写完缓冲区后，就可以继续执行后续的命令，但是落盘的时机已经不在 Redis 手中了，只要 AOF 记录没有写回磁盘，一旦宕机对应的数据就丢失了；</p><p><strong>No</strong>，“每秒写回”采用一秒写回一次的频率，避免了“同步写回”的性能开销，虽然减少了对系统性能的影响，但是如果发生宕机，上一秒内未落盘的命令操作仍然会丢失。所以，这只能算是，在避免影响主线程性能和避免数据丢失两者间取了个折中。</p><p><img src="/2022/01/28/Redis/image-20211121223415928.png" alt="image-20211121223415928"></p><p>到这里，我们就可以根据系统对高性能和高可靠性的要求，来选择使用哪种写回策略了。总结一下就是：想要获得高性能，就选择 No 策略；如果想要得到高可靠性保证，就选择 Always 策略；如果允许数据有一点丢失，又希望性能别受太大影响的话，那么就选择 Everysec 策略。</p><p>AOF文件过大会引起读写缓慢宕机后恢复数据缓慢 所以会有AOF数据重写机制</p><p>重写机制会将AOF中的多条命令转为一条 “多对一”</p><p>重写机制会在主线程下frok（Linux下的一个系统读写方法）出一个子线程来执行重写操作</p><h2 id="Redis快照"><a href="#Redis快照" class="headerlink" title="Redis快照"></a>Redis快照</h2><p>redis有两种方法实现快照</p><p>1 save</p><p>2 bgsave</p><p>save是在主线程中执行想内存中加载RDB文件  会造成主线程阻塞 影响正常业务</p><p>bgsave是主线程创建一个子线程来完成加载RDB文件 、bgsave 子进程是由主线程 fork 生成的，可以共享主线程的所有内存数据。bgsave 子进程运行后，开始读取主线程的内存数据，并把它们写入 RDB 文件。</p><p>那还原快照是数据可以读写吗</p><p>可以 借助操作系统的 写时复制技术</p><p><img src="/2022/01/28/Redis/image-20211123202031799.png" alt="image-20211123202031799"></p><p>主线程先在复制的数据上修改 不影响子线程在内存的写入</p><p>所以，在 Redis 中如果有一个 bgsave 在运行，就不会再启动第二个 bgsave 子进程</p><p>frok子线程时会一定程度阻塞主进程</p><h2 id="Redis系统性"><a href="#Redis系统性" class="headerlink" title="Redis系统性"></a>Redis系统性</h2><p><img src="/2022/01/28/Redis/image-20211124204307356.png" alt="image-20211124204307356"></p><p>Redis问题图解</p><p><img src="/2022/01/28/Redis/image-20211124204531708.png" alt="image-20211124204531708"></p><p><img src="/2022/01/28/Redis/image-20211125210734424.png" alt="image-20211125210734424"></p><h2 id="四种统计模式"><a href="#四种统计模式" class="headerlink" title="四种统计模式"></a>四种统计模式</h2>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>shiro</title>
    <link href="/2022/01/28/shiro/"/>
    <url>/2022/01/28/shiro/</url>
    
    <content type="html"><![CDATA[<h1 id="Shiro"><a href="#Shiro" class="headerlink" title="Shiro"></a>Shiro</h1><h2 id="helloShiro"><a href="#helloShiro" class="headerlink" title="helloShiro"></a>helloShiro</h2><h3 id="1-自定义UserRealm"><a href="#1-自定义UserRealm" class="headerlink" title="1.自定义UserRealm"></a>1.自定义UserRealm</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserRealm</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AuthorizingRealm</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> AuthorizationInfo <span class="hljs-title">doGetAuthorizationInfo</span><span class="hljs-params">(PrincipalCollection principalCollection)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;执行了授权操作&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> AuthenticationInfo <span class="hljs-title">doGetAuthenticationInfo</span><span class="hljs-params">(AuthenticationToken authenticationToken)</span> <span class="hljs-keyword">throws</span> AuthenticationException </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;执行了认证操作&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="2-配置ShiroConfig"><a href="#2-配置ShiroConfig" class="headerlink" title="2.配置ShiroConfig"></a>2.配置ShiroConfig</h3><p>此处报错 应将DefaultSecurityManager改为Default<strong>Web</strong>SecurityManager</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ShiroConfig</span></span>&#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ShiroFilterFactoryBean <span class="hljs-title">shiroFilterFactoryBean</span><span class="hljs-params">(<span class="hljs-meta">@Qualifier(&quot;Manager&quot;)</span> DefaultSecurityManager defaultSecurityManager)</span></span>&#123;<br>        ShiroFilterFactoryBean Bean = <span class="hljs-keyword">new</span> ShiroFilterFactoryBean();<br>        Bean.setSecurityManager(defaultSecurityManager);<br>        <span class="hljs-keyword">return</span> Bean;<br>    &#125;<br>    <br>    <span class="hljs-meta">@Bean(name = &quot;Manager&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> DefaultSecurityManager <span class="hljs-title">defaultSecurityManager</span><span class="hljs-params">(<span class="hljs-meta">@Qualifier(&quot;UserRealm&quot;)</span> UserRealm userRealm)</span></span>&#123;<br>        DefaultSecurityManager defaultSecurityManager = <span class="hljs-keyword">new</span> DefaultSecurityManager();<br>        defaultSecurityManager.setRealm(userRealm);<br>        <span class="hljs-keyword">return</span>  defaultSecurityManager;<br>    &#125;<br>    <br>    <span class="hljs-meta">@Bean</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> UserRealm <span class="hljs-title">userRealm</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> UserRealm();<br>&#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><p>由上到下依次赋值</p><h3 id="3-设置Shiro过滤器"><a href="#3-设置Shiro过滤器" class="headerlink" title="3.设置Shiro过滤器"></a>3.设置Shiro过滤器</h3><p><img src="/2022/01/28/shiro/image-20211110191322957.png" alt="image-20211110191322957"></p><h3 id="4-解决重定向问题-默认跳转index-jsp"><a href="#4-解决重定向问题-默认跳转index-jsp" class="headerlink" title="4.解决重定向问题  默认跳转index.jsp"></a>4.解决重定向问题  默认跳转index.jsp</h3><p>新建</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LoginFilter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">UserFilter</span> </span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">redirectToLogin</span><span class="hljs-params">(ServletRequest request, ServletResponse response)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        response.setContentType(<span class="hljs-string">&quot;application/json; charset=utf-8&quot;</span>);<br>        <span class="hljs-comment">// 自定义返回内容</span><br>        Integer a = <span class="hljs-keyword">new</span> Integer(<span class="hljs-number">401</span>);<br>        response.getWriter().write(a.toString());<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>在config中添加</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Map&lt;String, Filter&gt; filters = Bean.getFilters();<br>filters.put(<span class="hljs-string">&quot;auth&quot;</span>,<span class="hljs-keyword">new</span> LoginFilter());<br></code></pre></div></td></tr></table></figure><p>此处出现问题 controller层没有加@ResponseBody 报错</p><h3 id="5-在controller中写login方法"><a href="#5-在controller中写login方法" class="headerlink" title="5.在controller中写login方法"></a>5.在controller中写login方法</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = &quot;/to&quot;,method = RequestMethod.POST)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Msg <span class="hljs-title">Login</span><span class="hljs-params">(LoginModel loginModel, HttpServletRequest request)</span></span>&#123;<br>    Subject subject = SecurityUtils.getSubject();<br>    UsernamePasswordToken Token = <span class="hljs-keyword">new</span> UsernamePasswordToken(loginModel.getUsername(),loginModel.getPassword());<br>    <span class="hljs-keyword">try</span> &#123;<br>        subject.login(Token);<br>    &#125;<span class="hljs-keyword">catch</span> (UnknownAccountException e)&#123;<br>        <span class="hljs-keyword">return</span> Msg.fail(<span class="hljs-string">&quot;用户不存在&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">catch</span> (IncorrectCredentialsException e)&#123;<br>        <span class="hljs-keyword">return</span> Msg.fail(<span class="hljs-string">&quot;密码错误&quot;</span>);<br>    &#125;<br>    String s = CreatJwtToken.CreatToken(Token);<br>    Session session = subject.getSession();<br>    session.setAttribute(<span class="hljs-string">&quot;token&quot;</span>,s);<br>    System.out.println(<span class="hljs-string">&quot;***************************&quot;</span>);<br>    System.out.println(session.getAttribute(<span class="hljs-string">&quot;token&quot;</span>));<br>    <span class="hljs-keyword">return</span> Msg.DataOk(<span class="hljs-string">&quot;token&quot;</span>,s);<br><br>&#125;<br></code></pre></div></td></tr></table></figure><p>此处是从Subject.login进入到  UserRealm 中执行认证操作创建 </p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">UsernamePasswordToken Token = <span class="hljs-keyword">new</span> UsernamePasswordToken(loginModel.getUsername(),loginModel.getPassword());<br></code></pre></div></td></tr></table></figure><p>通过</p><p>subject.login(token)</p><p>传入</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">protected</span> AuthenticationInfo <span class="hljs-title">doGetAuthenticationInfo</span><span class="hljs-params">(AuthenticationToken Token)</span> <span class="hljs-keyword">throws</span> AuthenticationException </span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;执行了认证操作&quot;</span>);<br>    UsernamePasswordToken userToken = (UsernamePasswordToken) Token;<br>    String username = userToken.getUsername();<br>    User user = userService.getUserByname(username);<br>    <span class="hljs-keyword">if</span> (user == <span class="hljs-keyword">null</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> SimpleAuthenticationInfo(<span class="hljs-string">&quot;&quot;</span>,user.getPassword(),<span class="hljs-string">&quot;&quot;</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>密码操作由shiro执行</p><h3 id="6-新建JWTtoken加密token"><a href="#6-新建JWTtoken加密token" class="headerlink" title="6.新建JWTtoken加密token"></a>6.新建JWTtoken加密token</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CreatJwtToken</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String SECRET = <span class="hljs-string">&quot;wang&quot;</span>;<br><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">CreatToken</span><span class="hljs-params">(UsernamePasswordToken Token)</span></span>&#123;<br>        Date date = <span class="hljs-keyword">new</span> Date();<br><br><br>        <span class="hljs-comment">//设置过期时间为一分钟</span><br>        Calendar nowtime = Calendar.getInstance();<br>        nowtime.add(Calendar.DAY_OF_WEEK,<span class="hljs-number">3</span>);<br>        Date time = nowtime.getTime();<br><br>        HashMap&lt;String, Object&gt; Map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>        Map.put(<span class="hljs-string">&quot;alg&quot;</span>,<span class="hljs-string">&quot;HS256&quot;</span>);<br>        Map.put(<span class="hljs-string">&quot;typ&quot;</span>,<span class="hljs-string">&quot;JWT&quot;</span>);<br>        String token = JWT.create()<br>                .withHeader(Map)<span class="hljs-comment">//设置头部</span><br>                .withClaim(<span class="hljs-string">&quot;username&quot;</span>,Token.getUsername())<span class="hljs-comment">//主体</span><br>                .withClaim(<span class="hljs-string">&quot;password&quot;</span>,Token.getPassword().toString())<span class="hljs-comment">//主体</span><br>                .withExpiresAt(time)<span class="hljs-comment">//结束时间</span><br>                .withIssuedAt(date)<span class="hljs-comment">//开始时间</span><br>                .sign(Algorithm.HMAC256(SECRET));<span class="hljs-comment">//加入密钥</span><br><br>        <span class="hljs-keyword">return</span> token;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Map&lt;String, Claim&gt; <span class="hljs-title">verifyToken</span><span class="hljs-params">(String Token)</span></span>&#123;<br>        JWTVerifier build = JWT.require(Algorithm.HMAC256(SECRET)).build();<span class="hljs-comment">//解密token</span><br>        DecodedJWT jwt = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span>&#123;<br>            jwt = build.verify(Token);<span class="hljs-comment">//解码token</span><br>            System.out.println(<span class="hljs-string">&quot;111111111111&quot;</span>);<br>            System.out.println(Token);<br>        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<span class="hljs-comment">//捕获runtime异常</span><br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;登录已过期&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> jwt.getClaims();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="7-将生成的token传入subject的Session中"><a href="#7-将生成的token传入subject的Session中" class="headerlink" title="7.将生成的token传入subject的Session中"></a>7.将生成的token传入subject的Session中</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">String s = CreatJwtToken.CreatToken(Token);<br>Session session = subject.getSession();<br>session.setAttribute(<span class="hljs-string">&quot;token&quot;</span>,s);<br>System.out.println(<span class="hljs-string">&quot;***************************&quot;</span>);<br>System.out.println(session.getAttribute(<span class="hljs-string">&quot;token&quot;</span>));<br></code></pre></div></td></tr></table></figure><h3 id="8-在其他操作中验证token-可以将此部分打包为工具类"><a href="#8-在其他操作中验证token-可以将此部分打包为工具类" class="headerlink" title="8.在其他操作中验证token 可以将此部分打包为工具类"></a>8.在其他操作中验证token 可以将此部分打包为工具类</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Session session = SecurityUtils.getSubject().getSession();<br>Object principal = SecurityUtils.getSubject().getPrincipal();<br>System.out.println(principal);<br>String token = (String) session.getAttribute(<span class="hljs-string">&quot;token&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;*******************&quot;</span>);<br>System.out.println(token);<br>Map&lt;String, Claim&gt; stringClaimMap = CreatJwtToken.verifyToken(token);<br></code></pre></div></td></tr></table></figure><p>可以在数据库中添加角色字段   在此部分中授权 不同角色不同功能</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">protected</span> AuthorizationInfo <span class="hljs-title">doGetAuthorizationInfo</span><span class="hljs-params">(PrincipalCollection principalCollection)</span> </span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;执行了授权操作&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>出现的问题</p><p> String principal = (String) SecurityUtils.getSubject().getPrincipal();</p><p>获取不到登录对象的用户名</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">protected</span> AuthenticationInfo <span class="hljs-title">doGetAuthenticationInfo</span><span class="hljs-params">(AuthenticationToken Token)</span> <span class="hljs-keyword">throws</span> AuthenticationException </span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;执行了认证操作&quot;</span>);<br>    UsernamePasswordToken userToken = (UsernamePasswordToken) Token;<br>    String username = userToken.getUsername();<br>    User user = userService.getUserByname(username);<br>    <span class="hljs-keyword">if</span> (user == <span class="hljs-keyword">null</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> SimpleAuthenticationInfo(user.getUsername(),user.getPassword(),<span class="hljs-string">&quot;&quot;</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>new SimpleAuthenticationInfo(<strong>user.getUsername()</strong>,user.getPassword(),””);原因在于这里没有传入</p><p>此处黑体字也可以传入对应的实体类 </p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">String principal = (String) SecurityUtils.getSubject().getPrincipal(); <br></code></pre></div></td></tr></table></figure><p>就需要改为</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">User user = (User) SecurityUtils.getSubject().getPrincipal();<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>spring</title>
    <link href="/2022/01/28/spring/"/>
    <url>/2022/01/28/spring/</url>
    
    <content type="html"><![CDATA[<h1 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h1><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul><li>Spring是一个开源的免费的框架（容器）</li><li>Spring是一个轻量级，非入侵式的框架</li><li>控制翻转(IOC) 面向切面编程(AOP)</li><li>支持事务的处理，对框架整合的支持</li></ul><p><u><strong>Spring就是一个轻量级的控制翻转（IOC）和面向切面编程的框架</strong></u></p><p>IOC将控制权交到了客户端手中，Spring就是一个容器 将类对象加载到context容器中 用时取出   避免了new对象</p><p>提高了解耦性  new 对象是最大的耦合         </p><h2 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h2><p>最终类只需要专心完成自己本职方法  不用了解以及涉及其他额外的补充</p><p>代理类调用最终类方法，并且在此基础上加入额外补充</p><p>在业务修改时 不需要改动最终类方法 避免发生意外 只需在代理类中修改</p><h2 id="Bean的作用域"><a href="#Bean的作用域" class="headerlink" title="Bean的作用域"></a>Bean的作用域</h2><p>Spring默认单例模式及在bean标签中加入 scope属性 设置为singleton</p><p>及所有对象注入都为同一个对象 全局共享一个</p><p>原型模式  scope属性为prototype及注入对象时不为同一个对象</p><h2 id="注解开发"><a href="#注解开发" class="headerlink" title="注解开发"></a>注解开发</h2><p>@Autowired  自动装配 前提是装配的对象在IOC容器中存在 ByType查找bean中的对象</p><p>@Resource java原生注解 先通过Byname查找bean如果找不到再通过Bytype查找    </p><h2 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h2><p>xml配置文件</p><p><img src="/2022/01/28/spring/image-20211101203117695.png" alt="image-20211101203117695"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>mybatis</title>
    <link href="/2022/01/28/mybatis/"/>
    <url>/2022/01/28/mybatis/</url>
    
    <content type="html"><![CDATA[<h1 id="mybatis"><a href="#mybatis" class="headerlink" title="mybatis"></a>mybatis</h1><h2 id="第一个程序"><a href="#第一个程序" class="headerlink" title="第一个程序"></a>第一个程序</h2><p>1，配置连接的数据库</p><p>出现的问题：com.mysql.cj.jdbc.Driver的改动 之前为com.mysql.jdbc.Driver</p><p>修改方法database?serverTimezone=Asia/Shanghai&amp;useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=false</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">configuration</span></span><br><span class="hljs-meta">        <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/mybatis?serverTimezone=Asia/Shanghai<span class="hljs-symbol">&amp;amp;</span>useUnicode=true<span class="hljs-symbol">&amp;amp;</span>characterEncoding=utf8<span class="hljs-symbol">&amp;amp;</span>useSSL=false&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;123456&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;com/Usermapper.xml&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>2，</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">mybatisUtils</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> SqlSessionFactory sqlSessionFactory;<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            String resource = <span class="hljs-string">&quot;mybatis.xml&quot;</span>;<br>            InputStream inputStream = Resources.getResourceAsStream(resource);<br>            sqlSessionFactory = <span class="hljs-keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SqlSession <span class="hljs-title">getSqlSession</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> sqlSessionFactory.openSession();<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>获取session</p><p>Resource将xml文件转变为inputstream字节流传入build中</p><p>build中通过XMLConfigBuilder产生一个configuration对象</p><p>最后传入DefaultSqlSessionFactory中返回一个DefaultSqlSessionFactory对象</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">SqlSession sqlSession = mybatisUtils.getSqlSession();<br></code></pre></div></td></tr></table></figure><p>再通过sqlSessionFactory.openSession()返回一个Session对象对接数据库</p><p>3.编写接口类接收数据库传来的值 并在底层重写接口中的方法传回值</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">userDao</span> </span>&#123;<br>    <span class="hljs-function">List&lt;user&gt; <span class="hljs-title">getUserDao</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>4.编写mapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">mapper</span></span><br><span class="hljs-meta">        <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.userDao&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserDao&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.pojo.user&quot;</span>&gt;</span><br>        select * from mybatis.username<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>namespace=”com.userDao：在那个类中实现</p><p>id=”getUserDao”：对接的方法名</p><p> resultType=”com.pojo.user ：返回的类型</p><p>5.</p><p>编写输出类</p><p>要与数据库字段对应</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<br><span class="hljs-keyword">private</span> String name;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.pojo;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">user</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">user</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">user</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id, String name, <span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.id = id;<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setId</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getId</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getAge</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;user&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;id=&quot;</span> + id +<br>                <span class="hljs-string">&quot;, name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>6.</p><p>获取session</p><p>调用mapper实现接口类方法并且返回集合</p><p>for(类型名 类型 : 需要遍历的数组)    //因为xml中配置resultType为 User类型 所以User可以打印 userdao</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span> </span>&#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;<br>        SqlSession sqlSession = mybatisUtils.getSqlSession();<br>        userDao usedao = sqlSession.getMapper(userDao.class);<br>        List&lt;user&gt; userDao = usedao.getUserDao();<br>        System.out.println(userDao);<br>        <span class="hljs-keyword">for</span> (user user : userDao) &#123;<br>            System.out.println(user);<br>        &#125;<br>        sqlSession.close();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="增删改查"><a href="#增删改查" class="headerlink" title="增删改查"></a>增删改查</h2><p><img src="/2022/01/28/mybatis/image-20211017191032727.png" alt="image-20211017191032727"></p><h2 id="xml配置"><a href="#xml配置" class="headerlink" title="xml配置"></a>xml配置</h2><ul><li><p>configuration（配置）</p><ul><li><a href="https://mybatis.org/mybatis-3/zh/configuration.html#properties">properties（属性）</a></li><li><a href="https://mybatis.org/mybatis-3/zh/configuration.html#settings">settings（设置）</a></li><li><a href="https://mybatis.org/mybatis-3/zh/configuration.html#typeAliases">typeAliases（类型别名）</a></li></ul><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">typeAliases</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;domain.blog&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">typeAliases</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p><strong>包下的类使用小写就可以查到</strong></p><p>environments（环境配置）</p><ul><li><p>environment（环境变量）</p><ul><li>transactionManager（事务管理器）</li><li>dataSource（数据源）</li></ul></li><li><p><a href="https://mybatis.org/mybatis-3/zh/configuration.html#mappers">mappers（映射器）</a></p></li></ul></li></ul><h3 id="日志工厂"><a href="#日志工厂" class="headerlink" title="日志工厂"></a>日志工厂</h3><p><img src="/2022/01/28/mybatis/image-20211017192225354.png" alt="image-20211017192225354"></p><p> LOG4J |COMMONS_LOGGING</p><p>打印日志</p><h2 id="结果集映射"><a href="#结果集映射" class="headerlink" title="结果集映射"></a>结果集映射</h2><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectUsers&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;map&quot;</span>&gt;</span><br>  select id, username, hashedPassword<br>  from some_table<br>  where id = #&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>将所有的列映射到 <code>HashMap</code> 的键上，这由 <code>resultType</code> 属性指定</p><p>在学习了上面的知识后，你会发现上面的例子没有一个需要显式配置 <code>ResultMap</code>，这就是 <code>ResultMap</code> 的优秀之处——你完全可以不用显式地配置它们。 虽然上面的例子不用显式配置 <code>ResultMap</code>。 但为了讲解，我们来看看如果在刚刚的示例中，显式使用外部的 <code>resultMap</code> 会怎样，这也是解决列名不匹配的另外一种方式。</p><p>配置输出样式</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userResultMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;User&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;user_id&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;user_name&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;hashed_password&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>property：对象</p><p>然后在引用它的语句中设置 <code>resultMap</code> 属性就行了（注意我们去掉了 <code>resultType</code> 属性）。比如:</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectUsers&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;userResultMap&quot;</span>&gt;</span><br>  select user_id, user_name, hashed_password<br>  from some_table<br>  where id = #&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h2 id="连表查询-多对一"><a href="#连表查询-多对一" class="headerlink" title="连表查询 多对一"></a>连表查询 多对一</h2><p><img src="/2022/01/28/mybatis/image-20211017192739069.png" alt="image-20211017192739069"></p><p>association 连表查询为对象时       collection 连表查询为集合时使用</p><h2 id="连表查询-一对多"><a href="#连表查询-一对多" class="headerlink" title="连表查询 一对多"></a>连表查询 一对多</h2><p><img src="/2022/01/28/mybatis/image-20211017193029627.png" alt="image-20211017193029627"></p><p><strong>为什么不使用resultMap 输出的结果 student为空</strong> </p><p>输出类型为teacher   类中没有student 的输出格式   需要写resultMap来实现student的输出</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>JavaWeb</title>
    <link href="/2022/01/28/JavaWeb/"/>
    <url>/2022/01/28/JavaWeb/</url>
    
    <content type="html"><![CDATA[<h1 id="JavaWeb"><a href="#JavaWeb" class="headerlink" title="JavaWeb"></a>JavaWeb</h1><h2 id="6-1-servlet简介"><a href="#6-1-servlet简介" class="headerlink" title="6.1 servlet简介"></a>6.1 servlet简介</h2><ul><li><p>动态开发web技术</p></li><li><p>API的接口叫做servlet  </p><ul><li>编写一个类，实现servlet接口</li><li>开发的java部署到web服务器中</li></ul></li></ul><h2 id="6-2hello-servlet"><a href="#6-2hello-servlet" class="headerlink" title="6.2hello servlet"></a>6.2hello servlet</h2><p>1.创建一个maven项目</p><p>2.再pom中配置依赖</p><p>3.在maven下创建子项目    ？？？ 创建好的子项目的pom中应该有parent标签继承父项目  </p><p>4.在子项目中配置框架 Java包和resources包</p><p>5.java包下创建类继承HttpServlet,重写doget或dopost方法 在web.xml下配置</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">helloservlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        PrintWriter writer = resp.getWriter();<br>        writer.print(<span class="hljs-string">&quot;hello&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-keyword">super</span>.doPost(req, resp);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">&lt;servlet&gt;<br>    &lt;servlet-name&gt;hello&lt;/servlet-name&gt;<br>    &lt;servlet-<span class="hljs-class"><span class="hljs-keyword">class</span>&gt;<span class="hljs-title">com</span>.<span class="hljs-title">servlet</span>.<span class="hljs-title">helloservlet</span>&lt;/<span class="hljs-title">servlet</span>-<span class="hljs-title">class</span>&gt;</span><br><span class="hljs-class">&lt;/<span class="hljs-title">servlet</span>&gt;</span><br><span class="hljs-class">&lt;<span class="hljs-title">servlet</span>-<span class="hljs-title">mapping</span>&gt;</span><br><span class="hljs-class">    &lt;<span class="hljs-title">servlet</span>-<span class="hljs-title">name</span>&gt;<span class="hljs-title">hello</span>&lt;/<span class="hljs-title">servlet</span>-<span class="hljs-title">name</span>&gt;</span><br><span class="hljs-class">    &lt;<span class="hljs-title">url</span>-<span class="hljs-title">pattern</span>&gt;/<span class="hljs-title">hello</span>&lt;/<span class="hljs-title">url</span>-<span class="hljs-title">pattern</span>&gt;</span><br><span class="hljs-class">&lt;/<span class="hljs-title">servlet</span>-<span class="hljs-title">mapping</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>6.配置tomact 配置路径</p><p>7.启动项目</p><h2 id="6-3servlet原理"><a href="#6-3servlet原理" class="headerlink" title="6.3servlet原理"></a>6.3servlet原理</h2><p><img src="/2022/01/28/JavaWeb/image-20210928114010950.png" alt="image-20210928114010950"></p><p><img src="/2022/01/28/JavaWeb/image-20210928115508066.png" alt="image-20210928115508066">     </p><p>step1.浏览器依据ip,port建立与servlet容器之间的链接</p><p>  step2.浏览器将请求数据打包（即按照http协议的要求，将相关数据封装成一个数据包，一般称之为请求数据包）并发送给servlet容器</p><p>  step3.servlet容器解析请求数据包，并将解析之后得到的数据放到request对象上。同时，容器还要创建一个response对象。</p><p>  step4.servlet容器依据请求资源路径（即/web01/hello）找到servlet配置（toncat看到应用名web01之后，会找webapps下面 的一个文件夹，也叫web01，进去以后有一个web.xml，打开，然后找到一个一个”/hello”的配置 跟<servlet-name>对应，<servlet-name>（如：HelloWorldServlet）又跟<servlet-class>（如:web.HelloWorldServlet）即类名对应，所以容器知道是要处理哪一个类，会调用这个类的构造器去创建servlet对象），然后创建servlet对象。</servlet-class></servlet-name></servlet-name></p><p>  step5.容器接下来调用servlet对象的service方法，并且会将事先创建好的request对象和response对象作为service方法的<br>参数传递给servlet对象。</p><p>  step6.servelt可以通过request对象获得请求参数，进行相应的处理，然后将处理结果写到response对象上。</p><p>  step7.容器读取response对象上的数据，然后将处理结果打包（响应数据包）并发送给浏览器。</p><p>  step8.浏览器解析响应数据包，将返回的的数据展现给用户。</p><h2 id="6-4-response"><a href="#6-4-response" class="headerlink" title="6.4 response"></a>6.4 response</h2><h3 id="1-验证码"><a href="#1-验证码" class="headerlink" title="1.验证码"></a>1.验证码</h3><p><img src="/2022/01/28/JavaWeb/image-20210929200600622.png" alt="image-20210929200600622"></p><h3 id="2-下载图片"><a href="#2-下载图片" class="headerlink" title="2.下载图片"></a>2.下载图片</h3><h3 id><a href="#" class="headerlink" title></a><img src="/2022/01/28/JavaWeb/image-20210929200944206.png" alt="image-20210929200944206"></h3><h2 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h2><h3 id="cookie实现"><a href="#cookie实现" class="headerlink" title="cookie实现"></a>cookie实现</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">req.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br>resp.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br>      <br>resp.setHeader(<span class="hljs-string">&quot;Content-type&quot;</span>,<span class="hljs-string">&quot;text/html;charest=utf-8&quot;</span>);<br></code></pre></div></td></tr></table></figure><p>设置req resp 的编码防止乱码</p><p>设置resp.setHeader防止浏览器乱码</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Cookie[] cookies = req.getCookies();<br></code></pre></div></td></tr></table></figure><p>接收到传来的cookie</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (cookies != <span class="hljs-keyword">null</span>)&#123;<br>   out.print(resp.encodeURL(<span class="hljs-string">&quot;cookie值为&quot;</span>));<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i =<span class="hljs-number">0</span>; i&lt;cookies.length;i++)&#123;<br>     Cookie cookie = cookies[i];<br>     <span class="hljs-keyword">if</span> (cookie.getName().equals(<span class="hljs-string">&quot;time&quot;</span>))&#123;<br>           SimpleDateFormat dateformat = <span class="hljs-keyword">new</span> SimpleDateFormat(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);<br>            String dateStr = dateformat.format(System.currentTimeMillis());<br>        out.print(dateStr);<br>               &#125;<br>           &#125;<br>       &#125;<br></code></pre></div></td></tr></table></figure><p>通过循坏来找到name为time的cookie，找到其对应的value并打印出来</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Cookie cookie1 = <span class="hljs-keyword">new</span> Cookie(<span class="hljs-string">&quot;time&quot;</span>,System.currentTimeMillis()+<span class="hljs-string">&quot;&quot;</span>);<br>resp.addCookie(cookie1);<br></code></pre></div></td></tr></table></figure><p>之后重新定义一个cookie覆盖time</p><h3 id="cookie讲解"><a href="#cookie讲解" class="headerlink" title="cookie讲解"></a>cookie讲解</h3><p>HTTP Cookie 机制是 HTTP 协议无状态的一种补充和改良</p><p>Cookie 主要用于下面三个目的</p><ul><li><code>会话管理</code></li></ul><p>登陆、购物车、游戏得分或者服务器应该记住的其他内容</p><ul><li><code>个性化</code></li></ul><p>用户偏好、主题或者其他设置</p><ul><li><code>追踪</code></li></ul><p>记录和分析用户行为</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Mysql</title>
    <link href="/2022/01/28/Mysql/"/>
    <url>/2022/01/28/Mysql/</url>
    
    <content type="html"><![CDATA[<h1 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h1><h2 id="重点"><a href="#重点" class="headerlink" title="重点"></a>重点</h2><p>1 被约束的表称为副表，约束别人的表称为主表，外键设置在副表上的。<br>2 主表被参考的字段通常都设置为主键<br>3 当有外键约束的时候，添加数据的顺序：先加主表，再添加副表的数据<br>4 当有外键约束的时候，修改数据的顺序：先修改副表，再修改主表的数据<br>5 当有外键约束的时候，删除数据的顺序：先删除副表，再删除主表的数据</p><h2 id="一、数据库操作"><a href="#一、数据库操作" class="headerlink" title="一、数据库操作"></a>一、数据库操作</h2><h3 id="1、查看数据库"><a href="#1、查看数据库" class="headerlink" title="1、查看数据库"></a>1、查看数据库</h3><p>　　　　&gt;SHOW DATABASES;</p><h3 id="2、创建数据库："><a href="#2、创建数据库：" class="headerlink" title="2、创建数据库："></a>2、创建数据库：</h3><p>　　　　&gt;CREATE DATABASE db_name;　　//db_name为数据库名</p><h3 id="3、使用数据库："><a href="#3、使用数据库：" class="headerlink" title="3、使用数据库："></a>3、使用数据库：</h3><p>　　　　&gt;USE db_name;</p><h3 id="4、删除数据库："><a href="#4、删除数据库：" class="headerlink" title="4、删除数据库："></a>4、删除数据库：</h3><p>　　　　&gt;DROP DATABASE db_name;</p><h2 id="二、创建表"><a href="#二、创建表" class="headerlink" title="二、创建表"></a>二、创建表</h2><h3 id="1、创建表"><a href="#1、创建表" class="headerlink" title="1、创建表"></a>1、创建表</h3><p>　　　　&gt;CREATE TABLE table_name(</p><p>　　　　&gt;id TINYINT UNSIGNED NOT NULL AUTO_INCREMENT,　　　　//id值，无符号、非空、递增——唯一性，可做主键。</p><p>　　　　&gt;name VARCHAR(60) NOT NULL</p><p>　　　　&gt;score TINYINT UNSIGNED NOT NULL DEFAULT 0,　　　　//设置默认列值</p><p>　　　　&gt;PRIMARY KEY(id)</p><p>　　　　&gt;)ENGINE=InnoDB　　　　//设置表的存储引擎，一般常用InnoDB和MyISAM；InnoDB可靠，支持事务；MyISAM高效不支持全文检索</p><p>　　　　&gt;DEFAULT charset=utf8;　　//设置默认的编码，防止数据库中文乱码</p><p>　　　　如果有条件的创建数据表还可以使用  &gt;CREATE TABLE IF NOT EXISTS tb_name(……..</p><h3 id="2、复制表"><a href="#2、复制表" class="headerlink" title="2、复制表"></a>2、复制表</h3><p>　　　　&gt;CREATE TABLE tb_name2 SELECT * FROM tb_name;</p><p>　　　　或者部分复制：</p><p>　　　　&gt;CREATE TABLE tb_name2 SELECT id,name FROM tb_name;</p><h3 id="3、创建临时表"><a href="#3、创建临时表" class="headerlink" title="3、创建临时表"></a>3、创建临时表</h3><p>　　　　&gt;CREATE TEMPORARY TABLE tb_name(这里和创建普通表一样);</p><h3 id="4、查看数据库中可用的表"><a href="#4、查看数据库中可用的表" class="headerlink" title="4、查看数据库中可用的表"></a>4、查看数据库中可用的表</h3><p>　　　　&gt;SHOW TABLES;</p><h3 id="5、查看表的结构"><a href="#5、查看表的结构" class="headerlink" title="5、查看表的结构"></a>5、查看表的结构</h3><p>　　　　&gt;DESCRIBE tb_name;</p><p>　　　　也可以使用：</p><p>　　　　&gt;SHOW COLUMNS in tb_name; 　　　//from也可以</p><h3 id="6、删除表"><a href="#6、删除表" class="headerlink" title="6、删除表"></a>6、删除表</h3><p>　　　　&gt;DROP [ TEMPORARY ] TABLE [ IF EXISTS ] tb_name[ ,tb_name2…….];</p><p>　　　　实例：</p><p>　　　　&gt;DROP TABLE IF EXISTS tb_name;</p><h3 id="7、表重命名："><a href="#7、表重命名：" class="headerlink" title="7、表重命名："></a>7、表重命名：</h3><p>　　　　&gt;RENAME TABLE name_old TO name_new;</p><p>　　　　还可以使用：</p><p>　　　　&gt;ALTER TABLE name_old RENAME name_new;</p><h2 id="三、修改表："><a href="#三、修改表：" class="headerlink" title="三、修改表："></a>三、修改表：</h2><h3 id="1、更改表结构"><a href="#1、更改表结构" class="headerlink" title="1、更改表结构"></a>1、更改表结构</h3><p>　　　　&gt;ALTER TABLE tb_name ADD[CHANGE,RENAME,DROP] …要更改的内容…</p><p>　　　　实例：</p><p>　　　　&gt;ALTER TABLE tb_name ADD COLUMN address varchar(80) NOT NULL;</p><p>　　　　&gt;ALTER TABLE tb_name DROP address;</p><p>　　　　&gt;ALTER TABLE tb_name CHANGE score score SMALLINT(4) NOT NULL;</p><h2 id="四、插入数据"><a href="#四、插入数据" class="headerlink" title="四、插入数据"></a>四、插入数据</h2><p>　　1、插入数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs my">INSERT INTO tb_name(id,name,score)VALUES(NULL,&#x27;张三&#x27;,140),(NULL,&#x27;张四&#x27;,178),(NULL,&#x27;张五&#x27;,134);<br></code></pre></div></td></tr></table></figure><p>　　　　这里的插入多条数据直接在后边加上逗号，直接写入插入的数据即可；主键id是自增的列，可以不用写。</p><p>　　2、插入检索出来的数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysq">&gt;INSERT INTO tb_name(name,score) SELECT name,score FROM tb_name2;<br></code></pre></div></td></tr></table></figure><h2 id="五、更新数据："><a href="#五、更新数据：" class="headerlink" title="五、更新数据："></a>五、更新数据：</h2><p>　　1、指定更新数据：</p><p>　　　　&gt;UPDATE tb_name SET score=189 WHERE id=2;</p><p>　　　　&gt;UPDATE tablename SET columnName=NewValue [ WHERE condition ]</p><h2 id="六、删除数据："><a href="#六、删除数据：" class="headerlink" title="六、删除数据："></a>六、删除数据：</h2><h4 id="1、删除数据："><a href="#1、删除数据：" class="headerlink" title="1、删除数据："></a>1、删除数据：</h4><p>　　　　&gt;DELETE FROM tb_name WHERE id=3;</p><h2 id="七、条件控制："><a href="#七、条件控制：" class="headerlink" title="七、条件控制："></a>七、条件控制：</h2><h4 id="1、WHERE-语句："><a href="#1、WHERE-语句：" class="headerlink" title="1、WHERE 语句："></a>1、WHERE 语句：</h4><p>　　　　&gt;SELECT * FROM tb_name WHERE id=3;</p><h4 id="2、HAVING-语句："><a href="#2、HAVING-语句：" class="headerlink" title="2、HAVING 语句："></a>2、HAVING 语句：</h4><p>　　　　&gt;SELECT * FROM tb_name GROUP BY score HAVING count(*)&gt;2</p><h4 id="3、相关条件控制符："><a href="#3、相关条件控制符：" class="headerlink" title="3、相关条件控制符："></a>3、相关条件控制符：</h4><p>　　　　=、&gt;、&lt;、&lt;&gt;、IN(1,2,3……)、BETWEEN a AND b、NOT</p><p>　　　　AND 、OR</p><p>　　　　Linke()用法中    %  为匹配任意、  _  匹配一个字符（可以是汉字）</p><p>　　　　IS NULL 空值检测</p><h2 id="八、MySQL的正则表达式："><a href="#八、MySQL的正则表达式：" class="headerlink" title="八、MySQL的正则表达式："></a>八、MySQL的正则表达式：</h2><h4 id="1、Mysql支持REGEXP的正则表达式："><a href="#1、Mysql支持REGEXP的正则表达式：" class="headerlink" title="1、Mysql支持REGEXP的正则表达式："></a>1、Mysql支持REGEXP的正则表达式：</h4><p>　　　　&gt;SELECT * FROM tb_name WHERE name REGEXP ‘^[A-D]’  //找出以A-D 为开头的name</p><p>　　2、特殊字符需要转义。</p><h2 id="九、MySQL的一些函数："><a href="#九、MySQL的一些函数：" class="headerlink" title="九、MySQL的一些函数："></a>九、MySQL的一些函数：</h2><h4 id="1、字符串链接——CONCAT"><a href="#1、字符串链接——CONCAT" class="headerlink" title="1、字符串链接——CONCAT()"></a>1、字符串链接——CONCAT()</h4><p>　　　　&gt;SELECT CONCAT(name,’=&gt;’,score) FROM tb_name</p><h4 id="2、数学函数："><a href="#2、数学函数：" class="headerlink" title="2、数学函数："></a>2、数学函数：</h4><p>　　　　AVG、SUM、MAX、MIN、COUNT；</p><h4 id="3、文本处理函数："><a href="#3、文本处理函数：" class="headerlink" title="3、文本处理函数："></a>3、文本处理函数：</h4><p>　　　　TRIM、LOCATE、UPPER、LOWER、SUBSTRING</p><h4 id="4、运算符："><a href="#4、运算符：" class="headerlink" title="4、运算符："></a>4、运算符：</h4><p>　　　　+、-、*、\</p><h4 id="5、时间函数："><a href="#5、时间函数：" class="headerlink" title="5、时间函数："></a>5、时间函数：</h4><p>　　　　DATE()、CURTIME()、DAY()、YEAR()、NOW()…..</p><h2 id="十、分组查询："><a href="#十、分组查询：" class="headerlink" title="十、分组查询："></a>十、分组查询：</h2><h3 id="1、分组查询可以按照指定的列进行分组："><a href="#1、分组查询可以按照指定的列进行分组：" class="headerlink" title="1、分组查询可以按照指定的列进行分组："></a>1、分组查询可以按照指定的列进行分组：</h3><p>　　　　&gt;SELECT COUNT(<em>) FROM tb_name GROUP BY score HAVING COUNT(</em>)&gt;1;</p><p>　　2、条件使用Having；</p><p>　　3、ORDER BY 排序：</p><p>　　　　ORDER BY DESC|ASC　　　　=&gt;按数据的降序和升序排列</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>java</title>
    <link href="/2022/01/28/java/"/>
    <url>/2022/01/28/java/</url>
    
    <content type="html"><![CDATA[<h1 id="并发与并行"><a href="#并发与并行" class="headerlink" title="并发与并行"></a>并发与并行</h1><p>并发:一个处理器同时处理多个任务。</p><p>并行:多个处理器或者是多核的处理器同时处理多个不同的任务.</p><p>前者是逻辑上的同时发生（simultaneous），而后者是物理上的同时发生</p><p>并发性(concurrency)，又称共行性，是指能处理多个同时性活动的能力，并发事件之间不一定要同一时刻发生。</p><p>并行(parallelism)是指同时发生的两个并发事件，具有并发的含义，而并发则不一定并行。</p><p>来个比喻：并发和并行的区别就是一个人同时吃三个馒头和三个人同时吃三个馒头</p><h2 id="线程的创建"><a href="#线程的创建" class="headerlink" title="线程的创建"></a>线程的创建</h2><p>\1. 可以使用extends 继承Thread 重写run函数来使用线程</p><p>\2. 当此类以及有继承对象 可以使用implients 接入Runnable 接口来重写run 后 创建Thread对象将此类对象传入Thread中使用线程</p><h2 id="线程中断和线程插队"><a href="#线程中断和线程插队" class="headerlink" title="线程中断和线程插队"></a>线程中断和线程插队</h2><p>线程中断 使用interrupt中断线程</p><p>线程插队 使用join使另一个线程进行 此线程停止   可以使用yield 进行线程礼让 不一定礼让成功</p><h2 id="守护线程"><a href="#守护线程" class="headerlink" title="守护线程"></a>守护线程</h2><p>作用： 守护线程会与进程同步 当进程结束后 守护进程结束  可以调用一些垃圾回收机制</p><p>用法： 子线程名.setdaemon(true);</p><p>线程的七大状态：</p><p>new —– Runnable ——exit</p><p>其中Runnable 分为 runing 与 reday</p><p>当调用sleep join wait （均有时间限制）  线程进入Timedwaiting  时间结束后重新回到Runnable中</p><p>当调用 wait join (无时间限制时)  线程进入waiting 当调用重启函数时 重新进入Runnable中 </p><p>当有锁存在时 线程阻塞在blocked中 当同步线程结束后 进入runnable中</p><h2 id="线程同步机制"><a href="#线程同步机制" class="headerlink" title="线程同步机制"></a>线程同步机制</h2><p>在多线程编程 中 一些敏感数据不允许被多个线程同时访问，所以使用同步机制保证数据在任何时刻只有一个线程操作。</p><p>实现方法：synchronized 可以修饰方法 也可以修饰代码块</p><p>public synchronized void </p><p>synchronized{</p><p>​      代码  </p><p>}</p><h2 id="互斥锁（用来解决线程超出的情况）"><a href="#互斥锁（用来解决线程超出的情况）" class="headerlink" title="互斥锁（用来解决线程超出的情况）"></a>互斥锁（用来解决线程超出的情况）</h2><p>使用synchronized 当有线程调用的时候将代码锁住</p><p>非静态同步方法的锁可以是this 也可以是同一个对象 </p><p>静态同步方法的锁为类本身 类名.class</p><p>一般情况可以 使用   object static  o1 = new object()</p><p>static的对象是所有类对象同时使用的  所以可以做为锁的存在</p><p>线程死锁与释放锁：</p><p>当线程1进入到o1锁之后 要进入o2锁  线程2 进入o2锁之后要进入o1锁  </p><p>但 o1被线程1使用中没有执行完  o2被线程2执行 线程一无法进入o2 线程二无法进入o1所以两个线程构成死锁 无法运行</p><p>释放锁 ：</p><p>可以使用break退出线程循环来结束此次运行</p><p>使用if＋boolen类型的判断</p><h1 id="io流"><a href="#io流" class="headerlink" title="io流"></a>io流</h1><p>string  file=  一个文件 为“创建文件的路径</p><p>file . createNewFile()   创建文件</p><p>@test  作用：将当前类作为测试类运行 不需要mian方法去调用</p><h2 id="处理流的设计思路"><a href="#处理流的设计思路" class="headerlink" title="处理流的设计思路"></a>处理流的设计思路</h2><p>​      bufferedReader  为Reader的一个子类    可以接收所有Reader的子类对象    将子类对象包装起来统一实现</p><h2 id="io流分为几类"><a href="#io流分为几类" class="headerlink" title="io流分为几类"></a>io流分为几类</h2><ol><li>按数据流的方向：输入流、输出流</li><li>按处理数据单位：字节流、字符流</li><li>按功能：节点流、处理流</li></ol><h2 id="io流注意事项"><a href="#io流注意事项" class="headerlink" title="io流注意事项"></a>io流注意事项</h2><p>一个英文为一个字节，一个中文为两个字节。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IOImg</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException</span>&#123;<br>        FileInputStream is = <span class="hljs-keyword">null</span>;<br>        FileOutputStream os = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">byte</span>[] isarray = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>*<span class="hljs-number">1024</span>];<br>        <span class="hljs-keyword">int</span> len;<br>        <span class="hljs-keyword">long</span> starttime = System.currentTimeMillis();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i =<span class="hljs-number">1</span> ;i&lt;<span class="hljs-number">101</span>; i++)&#123;<br>            String str1 = <span class="hljs-string">&quot;D:\\img1\\1 - 副本 (&quot;</span>+i+<span class="hljs-string">&quot;).jpg&quot;</span>;<br>            String str2 = <span class="hljs-string">&quot;D:\\img2\\1 - 副本 (&quot;</span>+i+<span class="hljs-string">&quot;).jpg&quot;</span>;<br>            is = <span class="hljs-keyword">new</span> FileInputStream(str1);<br>            os = <span class="hljs-keyword">new</span> FileOutputStream(str2);<br>            BufferedInputStream bufferedInputStream = <span class="hljs-keyword">new</span> BufferedInputStream(is);<br>            BufferedOutputStream bufferedOutputStream = <span class="hljs-keyword">new</span> BufferedOutputStream(os);<br>            <span class="hljs-keyword">while</span> ((len = bufferedInputStream.read(isarray)) &gt; -<span class="hljs-number">1</span>)&#123;<br>                bufferedOutputStream.write(isarray);<br>            &#125;<br>            System.out.println(<span class="hljs-string">&quot;1 - 副本 (&quot;</span>+i+<span class="hljs-string">&quot;).jpg 复制完成&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">long</span> endtime = System.currentTimeMillis();<br>        System.out.println(endtime-starttime+<span class="hljs-string">&quot;ms&quot;</span>);<br>        is.close();<br>        os.close();<br><br>    &#125;<br>    &#125;<br><br></code></pre></div></td></tr></table></figure><p>传输图片的事例</p><p>字节流本身没有缓冲区，缓冲字节流相对于字节流，效率提升非常高。而字符流本身就带有缓冲区，缓冲字符流相对于字符流效率提升就不是那么大了。详见文末效率对比。</p><p><img src="/2022/01/28/java/image-20210926172511470.png" alt="image-20210926172511470"></p><h5 id="缓冲流的思路"><a href="#缓冲流的思路" class="headerlink" title="缓冲流的思路"></a>缓冲流的思路</h5><p>就应用这种思路：普通流每次读写一个字节，而缓冲流在内存中设置一个缓存区，缓冲区先存储足够的待操作数据后，再与内存或磁盘进行交互。这样，在总数据量不变的情况下，通过提高每次交互的数据量，减少了交互次数。</p><h5 id="io流所有类"><a href="#io流所有类" class="headerlink" title="io流所有类"></a>io流所有类</h5><p><img src="/2022/01/28/java/20200922220641678.png" alt="20200922220641678"></p><p>FileOutputStream(file ,true) true为追加的意思</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IOTest</span> </span>&#123;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">write</span><span class="hljs-params">(File file)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br><span class="hljs-comment">// 缓冲字节流，提高了效率</span><br>BufferedOutputStream bis = <span class="hljs-keyword">new</span> BufferedOutputStream(<span class="hljs-keyword">new</span> FileOutputStream(file, <span class="hljs-keyword">true</span>));<br><br><span class="hljs-comment">// 要写入的字符串</span><br>String string = <span class="hljs-string">&quot;松下问童子，言师采药去。只在此山中，云深不知处。&quot;</span>;<br><span class="hljs-comment">// 写入文件</span><br>bis.write(string.getBytes());<br><span class="hljs-comment">// 关闭流</span><br>bis.close();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">read</span><span class="hljs-params">(File file)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>BufferedInputStream fis = <span class="hljs-keyword">new</span> BufferedInputStream(<span class="hljs-keyword">new</span> FileInputStream(file));<br><br><span class="hljs-comment">// 一次性取多少个字节</span><br><span class="hljs-keyword">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];<br><span class="hljs-comment">// 用来接收读取的字节数组</span><br>StringBuilder sb = <span class="hljs-keyword">new</span> StringBuilder();<br><span class="hljs-comment">// 读取到的字节数组长度，为-1时表示没有数据</span><br><span class="hljs-keyword">int</span> length = <span class="hljs-number">0</span>;<br><span class="hljs-comment">// 循环取数据</span><br><span class="hljs-keyword">while</span> ((length = fis.read(bytes)) != -<span class="hljs-number">1</span>) &#123;<br><span class="hljs-comment">// 将读取的内容转换成字符串</span><br>sb.append(<span class="hljs-keyword">new</span> String(bytes, <span class="hljs-number">0</span>, length));<br>&#125;<br><span class="hljs-comment">// 关闭流</span><br>fis.close();<br><br><span class="hljs-keyword">return</span> sb.toString();<br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>关闭流之前要刷新flush()</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/09/25/hello-world/"/>
    <url>/2021/09/25/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></div></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo server<br></code></pre></div></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo generate<br></code></pre></div></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></div></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
